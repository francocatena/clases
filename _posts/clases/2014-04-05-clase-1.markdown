---
layout: post
title:  Clase 1 . Introducción
date:   2014-04-05 16:00:00
categories: clases
sections:
  el-curso: 'El curso'
  ruby: 'Ruby'
  rails: 'Rails'
  navegadores: 'Los navegadores'
  primeros-pasos: 'Primeros pasos'
  versionado: 'Versionado'
  resumen: 'Resumen'

---

<div class="page-header">
  <h3 class="section-anchor" id="el-curso">El curso</h3>
</div>

#### ¿Es para mí? ####

Si disfrutás _armar_ (o desarmar) _cosas_, si, es para vos

#### ¿Esto lo usa alguien? ####

- Twitter
- Github
- Basecamp
- Yo
- Vos (en breve)

#### ¿Tengo que tener experiencia? ####

Preferentemente conocer como funciona [HTTP][], nada que con entusiasmo no se pueda aprender...

[HTTP]: http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol "Hypertext Transfer Protocol"

#### ¿Tengo que saber inglés? ####

Casi toda la buena documentación (y la más actualizada) está en inglés, así que
si. También con entusiasmo y la ayuda de un traductor lo podés suplir =)

<div class="page-header">
  <h3 class="section-anchor" id="ruby">Ruby</h3>
</div>

- Dinámico (y mucho...)
- Simple y elegante
- Intuitivo, centrado en lo que espero
- Orientado a objetos

#### Un ejemplo ####

El clásico _Hola Mundo_

```ruby
puts "¡Hola mundo!"
```

<div>
  <a class="btn btn-default btn-xs" data-toggle="collapse" data-parent=".output" href="#ej1-output">
    Salida
  </a>

  <div class="collapse" id="ej1-output">
    <br>
    <pre>
¡Hola mundo!
    </pre>
  </div>
</div>

#### Con esteroides ####

Imprimir 5 veces _¡Hola mundo!_

```ruby
5.times do
  puts "¡Hola mundo!"
end
```

<div>
  <a class="btn btn-default btn-xs" data-toggle="collapse" data-parent=".output" href="#ej2-output">
    Salida
  </a>

  <div class="collapse" id="ej2-output">
    <br>
    <pre>
¡Hola mundo!
¡Hola mundo!
¡Hola mundo!
¡Hola mundo!
¡Hola mundo!
    </pre>
  </div>
</div>

#### ¿En castellano? ####

Podemos sobre-escribir cualquier método de cualquier clase, inclusive los _de fábrica_...

```ruby
class Integer
  alias_method :veces, :times
end

module Kernel
  alias_method :mostrar, :puts
end

5.veces { mostrar "¡Hola Mundo!" }
```

<div>
  <a class="btn btn-default btn-xs" data-toggle="collapse" data-parent=".output" href="#ej3-output">
    Salida
  </a>

  <div class="collapse" id="ej3-output">
    <br>
    <pre>
¡Hola mundo!
¡Hola mundo!
¡Hola mundo!
¡Hola mundo!
¡Hola mundo!
    </pre>
  </div>
</div>

#### Las gemas ####

Son aplicaciones o librerías **empaquetadas**

- Tienen un nombre - <code>rails</code>
- Y una versión - <code>4.1.0</code>

#### ¿Para qué? ####

En _Rubylandia_ tienen mucha importancia

- No reinventamos la rueda
- Resuelven problemas específicos
- Podemos usarlas, extenderlas y mejorarlas

#### Algunos ejemplos ####

- Ruby on Rails → <code>rails</code>
- Conexión a BBDD → <code>sqlite3</code>
- Autenticación → <code>devise</code>
- Paginación → <code>will_paginate</code>
- Y otras 73000 más =)

#### ¿Y Rake? ####

Similar a <kbd>make</kbd> (¿Uh?), permite automatizar tareas

- Ejecutar pruebas → <kbd>rake test</kbd>
- Ver mis URLs → <kbd>rake routes</kbd>
- Actualizar esquema de BD → <kbd>rake db:migrate</kbd>

<div class="page-header">
  <h3 class="section-anchor" id="rails">Rails</h3>
</div>

#### Especializando Ruby ####

Ruby on Rails _[o Rails o RoR]_ extiende Ruby para **especializarlo** en desarrollo Web

#### Algunos "principios" ####

- DRY (**no** te **repitas**...)
- CoC (convención sobre configuración)
- Prueba **todo** (y solo lo que has hecho...)
- MVC (con solo modelos pesados 2...)

<div class="page-header">
  <h3 class="section-anchor" id="navegadores">Los navegadores</h3>
</div>

En los navegadores ejecutamos la **mitad** (+-25%) de nuestra aplicación.
No podemos ignorarlos en un curso así =)

#### Consideraciones ####

- Estándares ([W3C][], [ECMAScript][])
- Plataformas (Linux, OSX, Windows, ¿Móviles?...)
- Velocidad (renderizado, ejecución de JavaScript...)
- Tecnologías (compresión, protocolos...)
- Popularidad (no siempre gana el bueno...)

[W3C]: http://www.w3.org/ "World Wide Web Consortium"
[ECMAScript]: http://www.ecmascript.org/ "ECMAScript"

<div class="page-header">
  <h3 class="section-anchor" id="primeros-pasos">Primeros pasos</h3>
</div>

#### Mucha charla ####

A preparar el ambiente, primero instalá Ruby y Rails, mirá las instrucciones de [instalación][]

[instalación]: /instalacion "Instalación"

#### La primera aplicación ####

```console
$ rails new foro -d sqlite3
$ cd foro
$ rails g scaffold persona nombre apellido
$ rake db:migrate
$ rails s
```

#### El resultado ####

Visitemos [http://localhost:3000/](http://localhost:3000/)

Si todo se ve bien, ahora veamos [http://localhost:3000/personas](http://localhost:3000/personas)

<div class="page-header">
  <h3 class="section-anchor" id="versionado">Versionado</h3>
</div>

#### ¿Para qué? ####

Para manejar cambios en archivos (como documentos, código, imágenes, etc)

#### Eso yo lo hago... ####

1. Algo.txt
2. Algo\_nuevo.txt
3. Algo\_final.txt
4. Algo\_final\_final.txt
5. Algo\_este\_si\_es\_el\_ultimo.txt

#### Yo programo ####

Y obviamente no hago eso... ¿O si?

```ruby
#def funcion_dudosa
#  boom!
#end

def funcion_bien_hecha
  puts 'Esta función seguro hace lo que quiero'
end
```

#### Otra forma ####

O la forma de los **machos** (obviamente es la que uso yo)

Usar una herramienta que nos ayude a llevar la historia

#### Alternativas ####

- CVS
- Subversion
- Git

#### Componentes de Git ####

##### Archivos #####

Son los archivos, los directorios, los enlaces simbólicos, etc.

##### Revisiones #####

Una revisión es un cambio y contiene:

- Archivo(s)
- Datos de usuario
- Fecha
- Y más...

##### Referencias #####

Cada revisión contiene información sobre su ascendencia

#### Apuntadores ####

- Etiquetas
- Ramas
- Actual (o HEAD)

#### Estructura ####

- Repositorio es el directorio <code>.git</code>
- Indice Cambios a incluir en la próxima revisión
- Directorio de trabajo Es lo que **veo**

#### Comandos ####

La forma básica es

```console
$ git [opciones] <comando> [opciones]
```

#### Ayuda ####

```console
$ git help
$ git <comando> -h
$ git help <comando>
```

#### Configuración ####

Vive en <code>$HOME/.gitconfig</code>

```console
$ git config --global user.name "Franco Catena"
$ git config --global user.email francocatena@gmail.com
$ git config --global color.ui auto
```

#### Operaciones básicas ####

- Inicialización → <code>init</code>
- Copia → <code>clone</code>
- Cambio de rama → <code>checkout</code>

#### A trabajar #####

```console
$ cd foro
$ git init
$ ls -a
```

Y hacemos nuestro primer commit

```console
$ git status
$ git add .
$ git status # Si, otra vez
$ git commit -m "Primer revisión del foro"
$ git status # Y si, una más
```

Los estados en los que se pueden encontrar los archivos son:

- **Staged**: forma parte del próximo commit
- **Unstaged**: no forma parte del próximo commit (pero Git ya conoce parte de su historia)
- **Untracked**: no forma parte del próximo commit (y Git no conoce su historia)
- **Ignored**: no forma parte del próximo commit (Git los ignora deliberadamente)

#### Github (opcional) ####

Para subir nuestro trabajo a [Github][] creá un usuario (si no lo tenés) y
seguí las instrucciones de configuración. Después ejecutá:

```console
$ git remote add origin git@github.com:rubyutn/foro.git # con tu repositorio
$ git push -u origin master
```

[Github]: https://github.com/

<div class="page-header">
  <h3 class="section-anchor" id="resumen">Resumen</h3>
</div>

- Instalamos todo nuestro ambiente
- Creamos el esqueleto de una aplicación
- Creamos un ABM funcional
- Versionamos y publicamos nuestra aplicación
