---
layout: post
title:  Clase 1 (Introducción)
date:   2014-04-05 16:00:00
categories: clases
sections:
  el-curso: 'El curso'
  ruby: 'Ruby'
  rails: 'Rails'
  navegadores: 'Los navegadores'
  primeros-pasos: 'Primeros pasos'

---

<div class="page-header"><h3 class="section-anchor" id="el-curso">El curso</h3></div>

#### ¿Es para mí? ####

Si disfrutás _armar_ (o desararmar) _cosas_, si, es para vos

#### ¿Esto lo usa alguien? ####

- Twitter
- Github
- Basecamp
- Yo
- Vos (en breve)

#### ¿Tengo que tener experiencia? ####

Preferentemente conocer como funciona [HTTP][], nada que con entusiasmo no se pueda aprender...

[HTTP]: http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol "Hypertext Transfer Protocol"

#### ¿Tengo que saber inglés? ####

Casi toda la buena documentación (y la más actualizada) está en inglés, así que
si. También con entusiasmo y la ayuda de un traductor lo podés suplir =)

<div class="page-header"><h3 class="section-anchor" id="ruby">Ruby</h3></div>

- Dinámico (y mucho...)
- Simple y elegante
- Intuitivo, centrado en lo que espero
- Orientado a objetos

#### Un ejemplo ####

El clásico _Hola Mundo_

```ruby
puts "¡Hola mundo!"
```

#### Con esteroides ####

Imprimir 5 veces _¡Hola mundo!_

```ruby
5.times do
  puts "¡Hola mundo!"
end
```

#### ¿En castellano? ####

Podemos sobre-escribir cualquier método de cualquier clase, inclusive los _de fábrica_...

```ruby
class Integer
  alias_method :veces, :times
end

module Kernel
  alias_method :mostrar, :puts
end

5.veces { mostrar "¡Hola Mundo!" }
```

#### Las gemas ####

Son aplicaciones o librerías **empaquetadas**

- Tienen un nombre - <code>rails</code>
- Y una versión - <code>4.1.0</code>

#### ¿Para qué? ####

En _Rubylandia_ tienen mucha importancia

- No reinventamos la rueda
- Resuelven problemas específicos
- Podemos usarlas, extenderlas y mejorarlas

#### Algunos ejemplos ####

- Ruby on Rails → <code>rails</code>
- Conexión a BBDD → <code>sqlite3</code>
- Autenticación → <code>devise</code>
- Paginación → <code>will_paginate</code>
- Y otras 73000 más =)

#### ¿Y Rake? ####

Similar a <code>make</code> (¿Uh?), permite automatizar tareas

- Ejecutar pruebas → <code>rake test</code>
- Ver mis URLs → <code>rake routes</code>
- Actualizar esquema de BD → <code>rake db:migrate</code>

<div class="page-header"><h3 class="section-anchor" id="rails">Rails</h3></div>

#### Especializando Ruby ####

Ruby on Rails _[o Rails o RoR]_ extiende Ruby para **especializarlo** en desarrollo Web

#### Algunos "principios" ####

- DRY (**no** te **repitas**...)
- CoC (convención sobre configuración)
- Prueba **todo** (y solo lo que has hecho...)
- MVC (con solo modelos pesados 2...)

<div class="page-header"><h3 class="section-anchor" id="navegadores">Los navegadores</h3></div>

En los navegadores ejecutamos la **mitad** (+-25%) de nuestra aplicación.
No podemos ignorarlos en un curso así =)

#### Consideraciones ####

- Estándares ([W3C][], [ECMAScript][])
- Plataformas (Linux, OSX, Windows, ¿Móviles?...)
- Velocidad (renderizado, ejecución de JavaScript...)
- Tecnologías (compresión, protocolos...)
- Popularidad (no siempre gana el bueno...)

[W3C]: http://www.w3.org/ "World Wide Web Consortium"
[ECMAScript]: http://www.ecmascript.org/ "ECMAScript"

<div class="page-header"><h3 class="section-anchor" id="primeros-pasos">Primeros pasos</h3></div>

#### Mucha charla ####

A preparar el ambiente, primero instalá Ruby y Rails, mirá las instrucciones de [instalación][]

[instalación]: /instalacion "Instalación"

#### La primera aplicación ####

```console
rails new blog -d sqlite3
cd blog
rails g scaffold persona nombre apellido
rake db:migrate
rails s
```

#### El resultado ####

Visitemos [http://localhost:3000/](http://localhost:3000/)

Si todo se ve bien, ahora veamos [http://localhost:3000/personas](http://localhost:3000/personas)

#### En resumen ####

- Instalamos todo nuestro ambiente
- Creamos el esqueleto de una aplicación
- Creamos un ABM funcional
